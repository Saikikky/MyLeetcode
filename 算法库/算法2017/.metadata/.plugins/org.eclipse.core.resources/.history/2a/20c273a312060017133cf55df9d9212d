import java.awt.HeadlessException;
import java.util.Scanner;

// 堆排序
public class Main {
	
	static int n;
	static int a[];
	static int halfSize;
	
	static void Swap(int[] a, int x, int y) {
		int temp = a[x];
		a[x] = a[y];
		a[y] = temp;
	}
	
	static void Max_Heapify(int[] a, int i) {
		int lchild = 2*i; // i的左孩子节点序号
		int rchild = 2*i + 1; // i的右孩子节点序号
		int temp = i; // 临时变量
		if (i < n / 2) { // 若不是叶子节点则不用调整
			if (lchild <= halfSize && a[lchild] > a[temp]) {
				temp = lchild;
			}
			if (rchild <= halfSize && a[rchild] > a[temp]) {
				temp = rchild;
			}
			if (temp != i) {
				Swap(a, i, temp);
				Max_Heapify(a, temp); // 避免调整之后的以temp为父节点的子树可能会违反最大堆的原则
			}
		}
	}
	
	static void Build_Max_Heap(int[] a) { // 建立堆
		halfSize = n;
		for (int i = n / 2; i >= 1; i--) { // 非叶子结点的最大序号值是n/2
			Max_Heapify(a, i);
		}
		
	}
	
	static void HeapSort(int[] a) {
		Build_Max_Heap(a); // 创建最大堆
		for (int i = n; i >= 1; i--) {
			// 数组中的最大元素总在根节点a[1]中 
			// 使其与a[n]互换 将其放入应在的位置 并进行下一轮堆排序
			// 交换堆顶和最后一个元素，即每次将剩余元素中的最大者放到最后面
			Swap(a, 1, i);
			halfSize = halfSize - 1;
			// 将余下元素重新建立为最大堆
			Max_Heapify(a, 1);
		}
	}
	
	

	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		n = in.nextInt();
		halfSize = n;
		
		a = new int[n + 1];
		for (int i = 1; i <= n; i++) {
			a[i] = in.nextInt();
		}
		
		HeapSort(a);
		
		for (int i = 1; i <= n; i++) {
			System.out.print(a[i]);
		}
		System.out.println();
	}
	
}

/*// 交换排序（快速排序）
import java.util.Scanner;

public class Main {
	
	static int n;
	static int[] a;
	
	static void quickSort(int[] a) {
		
	}
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		n = in.nextInt();
		a = new int[n];
		for (int i = 0; i < n; i++) {
			a[i] = in.nextInt();
		}
		
		quickSort(a);
		
		for (int i = 0; i < n; i++) {
			System.out.print(a[i]);
		}
		System.out.println();
	}
}
*/
/*
 * 人鬼过河
 */
/*
import java.util.Map;
import java.util.Queue;
import java.util.Scanner;

public class Main {
	// 人鬼过河 3人3鬼 河上只有一条小船，船上最多能坐两个人或鬼，在河的任何一边
	// 当鬼的个数比人多时，鬼就会吃掉人。
	
	static int[] person; // 人  0为未过河 1为已经过河 
	static int[] ghost; // 鬼 同上  
	static int[] num = new int[21];
	static int count = 0; // 每运一次船就加一
	static int ok1 = 0; // 人数
	static int ok2 = 0; // 鬼数
	static int tag = 1;
	
	static class Boat {
		int p = 0; // 人的数量
		int g = 0; // 鬼的数量
	}
	
	static Queue<Boat> b;
	
	static void DFS(int x) {
		if (count <= 20) {
			for (int i = 1; i <= 3; i++) {
				if (person[i] == 1) ok1++;
				if (ghost[i] == 1) ok2++;
			}
			if (ok1 == 3 && ok2 == 3) {
				// 输出
				for (int i = 0; i < b.size(); i++) {
					Boat boat = b.poll();
					if (boat.p == 0 && boat.g == 1) {
						System.out.println("0人1鬼过河");
					} else if (boat.p == 0 && boat.g == 2) {
						System.out.println("0人2鬼过河");
					} else if (boat.p == 1 && boat.g == 0) {
						System.out.println("1人0鬼过河");
					} else if (boat.p == 2 && boat.g == 0) {
						System.out.println("2人0鬼过河");
					} 
				}
				
			} else {
				// 递归回溯
				int temp1 = 0, temp2 = 0;
				if (ok2 <= ok1 || 3 - ok2 <= 3 - ok1) { // 两边岸存在人大于鬼的情况 否则直接退出
					if (tag == 1) { // 船在河这边
						for (int i = 1; i <= 3; i++) { 
							if (person[i] == 0) temp1++;// 计算在河这边的人数
							if (ghost[i] == 0) temp2++; // 计算河对岸的人数
						}
						
						
					} else if (tag == -1) { // 船在河对岸
						
					}
				}
				
			}
		}
		ok1 = 0;
		ok2 = 0;
		
	}

    public static void main(String[] args) {
        
    	person = new int[4];
    	ghost = new int[4];
    	
    }
}
*/
